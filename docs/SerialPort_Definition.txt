typedef enum {
    PORTSHARING_UNUSED = 0,
    PORTSHARING_NOT_SHARED,
    PORTSHARING_SHARED
} portSharing_e;

typedef enum {
    FUNCTION_NONE                = 0,
    FUNCTION_MSP                 = (1 << 0), // 1
    FUNCTION_GPS                 = (1 << 1), // 2
    FUNCTION_TELEMETRY_FRSKY     = (1 << 2), // 4
    FUNCTION_TELEMETRY_HOTT      = (1 << 3), // 8
    FUNCTION_TELEMETRY_LTM       = (1 << 4), // 16
    FUNCTION_TELEMETRY_SMARTPORT = (1 << 5), // 32
    FUNCTION_RX_SERIAL           = (1 << 6), // 64
    FUNCTION_BLACKBOX            = (1 << 7), // 128
    FUNCTION_TELEMETRY_MAVLINK   = (1 << 8), // 256
    FUNCTION_TELEMETRY_IBUS      = (1 << 9), // 512
    FUNCTION_RCDEVICE            = (1 << 10), // 1024
    FUNCTION_VTX_SMARTAUDIO      = (1 << 11), // 2048
    FUNCTION_VTX_TRAMP           = (1 << 12), // 4096
    FUNCTION_UAV_INTERCONNECT    = (1 << 13), // 8192
    FUNCTION_OPTICAL_FLOW        = (1 << 14), // 16384
    FUNCTION_DEBUG_TRACE         = (1 << 15), // 32768
} serialPortFunction_e;

typedef enum {
    BAUD_AUTO = 0,
    BAUD_1200,
    BAUD_2400,
    BAUD_4800,
    BAUD_9600,
    BAUD_19200,
    BAUD_38400,
    BAUD_57600,
    BAUD_115200,
    BAUD_230400,
    BAUD_250000,
    BAUD_460800,
    BAUD_921600,
    BAUD_1000000,
    BAUD_1500000,
    BAUD_2000000,
    BAUD_2470000
} baudRate_e;

extern const uint32_t baudRates[];

// serial port identifiers are now fixed, these values are used by MSP commands.
typedef enum {
    SERIAL_PORT_NONE = -1,
    SERIAL_PORT_USART1 = 0,
    SERIAL_PORT_USART2,
    SERIAL_PORT_USART3,
    SERIAL_PORT_USART4,
    SERIAL_PORT_USART5,
    SERIAL_PORT_USART6,
    SERIAL_PORT_USART7,
    SERIAL_PORT_USART8,
    SERIAL_PORT_USB_VCP = 20,
    SERIAL_PORT_SOFTSERIAL1 = 30,
    SERIAL_PORT_SOFTSERIAL2,
    SERIAL_PORT_IDENTIFIER_MAX = SERIAL_PORT_SOFTSERIAL2
} serialPortIdentifier_e;

//serial.h
